<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="45">
  <CheatEntries>
    <CheatEntry>
      <ID>675</ID>
      <Description>"BATCH ENABLE"</Description>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>{$lua}

local al=getAddressList()
local scrpts={}
local first=false
for i=0, al.Count-1 do --skip ENABLE
    local ai=al[i]
    if ai.type==11 then
       if first==false then
          first=true
       else
           table.insert(scrpts,ai)
       end
    end
end

[ENABLE]
-- UNCOMMENT ANY UNWANTED SCRIPTS
--scrpts[1].Active=true -- Left arm
--scrpts[2].Active=true -- Twist
--scrpts[3].Active=true -- Legs dist
--scrpts[4].Active=true -- Animation change
--scrpts[5].Active=true -- Animation speed
--scrpts[6].Active=true -- Pre-kick rush
--scrpts[7].Active=true -- Broadcast focus
--scrpts[8].Active=true -- Angle hijack (stadium)
--scrpts[9].Active=true -- Smoother anim
--scrpts[10].Active=true -- Cutscenes heights
--scrpts[11].Active=true -- Game speed
--scrpts[12].Active=true -- Height
--scrpts[13].Active=true -- Body Size
--scrpts[14].Active=true -- Camera mod (Uses 15 and 16 too)
--scrpts[17].Active=true -- Difficulty fix
--scrpts[18].Active=true -- Additional time
--scrpts[19].Active=true -- New broadcast camera (Uses 20 and 21 too)
--scrpts[22].Active=true -- Twist right
--scrpts[23].Active=true -- Dribble

[DISABLE]
--scrpts[1].Active=false -- Left arm
--scrpts[2].Active=false -- Twist
--scrpts[3].Active=false -- Legs dist
--scrpts[4].Active=false -- Animation change
--scrpts[5].Active=false -- Animation speed
--scrpts[6].Active=false -- Pre-kick rush
--scrpts[7].Active=false -- Broadcast focus
--scrpts[8].Active=false -- Angle hijack (stadium)
--scrpts[9].Active=false -- Smoother anim
--scrpts[10].Active=false -- Cutscenes heights
--scrpts[11].Active=false -- Game speed
--scrpts[12].Active=false -- Height
--scrpts[13].Active=false -- Body size
--scrpts[14].Active=false -- Camera mod (Uses 15 and 16 too)
--scrpts[17].Active=false -- Difficulty fix
--scrpts[18].Active=false -- Additional time
--scrpts[19].Active=false -- New broadcast camera (Uses 20 and 21 too)
--scrpts[22].Active=false -- Twist right
--scrpts[23].Active=false -- Dribble

</AssemblerScript>
      <CheatEntries>
        <CheatEntry>
          <ID>676</ID>
          <Description>"Left arm"</Description>
          <Options moHideChildren="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
if syntaxcheck then return end
local vars={}
--OPTIONAL (Add as named element of 'vars' table to use in '$%s{...}' notation)
local suffix='_la'
vars.varis_1_n='mult'..suffix

local m1=1 -- mean
local r1=0 -- range

vars.varis_1_d='dd (float)'..m1..'\ndd (float)'..r1
vars.varis_1_size=8
local parts={{'[^%]]+',1,'localAddress'},{'%d+',1,'xreg_n'},{'xmm%d+',1,'x_reg'},{'mov.+',1,'mov_op'}}
local module_names='PES2021.exe'

vars.post={}

vars.post[1]=function() --gives names "xmm~1" to "xmm~15" to all registers that are not 'x_reg'
 local xn=tonumber(vars.xreg_n)
 local c=1
 for i=0,15 do
  if xn~=i then
   vars['xmm~'..c]='xmm'..i
   c=c+1
  end
 end
 return vars --IMPORTANT!
end

-- token functions (below) run after ['post'] functions
vars['push_xmm']=function(n) -- n, as all arguments used for token functions, is necessarily a string!
    local s='sub rsp,10\nmovdqu [rsp], '
    if n=='0' then
		return s .. vars['x_reg']
	else
		return s .. vars['xmm~'..n]
	end
end

vars['pop_xmm']=function(n) -- n, as all arguments used for token functions, is necessarily a string!
    local s=',[rsp]\nadd rsp,10'
    if n=='0' then
		return 'movdqu '..vars['x_reg'] .. s
	else
		return 'movdqu '..vars['xmm~'..n] .. s
	end
end

vars['stack_push']=function(n) -- n, as all arguments used for token functions, is necessarily a string!
		return 'sub rsp, ' .. n
end

vars['stack_pop']=function(n) -- n, as all arguments used for token functions, is necessarily a string!
		return 'add rsp, ' .. n
end

--COMPULSORY
local newmem_name='newmem'..suffix
local newmem_size='$1000'
local script_ref='Left_arm' --  opcode_inj[vars.script_ref] stores vars
local inj_name='INJECT'..suffix
local pattern='^%s*mov.+%s*xmm%d+,%s*%[[^%]]+%]'
local aobs={'48 89 44 24 20 C7 44 24 28 FF FF FF FF 89 44 24 2C',-24,0}
local lookahead_n=32

local inj_script=[[
define(${inj_name},${address_string})
  registersymbol(${inj_name})
  alloc(${newmem_name}, ${newmem_size}, ${inj_name})

  alloc(${varis_1_n}, $%d{varis_1_size}, ${inj_name})
  registersymbol(${varis_1_n})
  ${varis_1_n}:
  ${varis_1_d}

  label(code)
  label(return)

  ${newmem_name}:
  code:
    push rcx
    push rbx
    push rax

    mov rax,[7FFE0014] //Windows internal clock
    mov rbx,rax
    shl rbx,6
    mov rcx,rax
    shl rcx,18
    imul rcx,rbx
    imul rcx,rax
    shr rcx,20 //ecx has the number
 ${push_xmm}(1)
    ${push_xmm}(2)
    ${push_xmm}(3)
    ${push_xmm}(4)
    ${push_xmm}(5)
    ${push_xmm}(0)

    cvtsi2ss ${x_reg}, rcx
    cvtss2sd ${x_reg}, ${x_reg}

    ${stack_push}(8)
        mov [rsp],FFE00000
        mov [rsp+4],41EFFFFF //move max_float into stack
        divsd ${x_reg}, [rsp] //div by max float (in double precision)
    ${stack_pop}(8)

    cvtsd2ss ${x_reg}, ${x_reg} //random float in ${x_reg}

    cvtss2si ecx, ${x_reg}  //b as int
    cvtsi2ss  ${xmm~5}, ecx // b

    ${stack_push}(20)
        mov [rsp], C0000000 //-2
        mov [rsp+4], 3F800000 //1
        mov [rsp+8], 40000000 //2
        mov [rsp+C], 3F3504F3 //sqHalf

        movss ${xmm~1},  [rsp+C] //sqHalf
        movss ${xmm~2}, [rsp] //-2
        movss ${xmm~3}, [rsp+4] //1
        movss ${xmm~4}, [rsp+8] //2

        mulss ${xmm~4}, ${xmm~5} //x~4=b*2
        subss ${xmm~3}, ${xmm~4} // x~3=1-b*2
        mulss ${xmm~1}, ${xmm~3} // x~1 = ( sqHalf* (1-b*2) )
        mulss ${xmm~2}, ${xmm~5} //x~2 = -2*b
        mulss ${xmm~2}, ${x_reg} // x~2=(-2*b)*x
        addss ${xmm~2}, ${xmm~5}//x~2=(-2*b*x)+b
        addss ${xmm~2}, ${x_reg} // x~2=(-2*b*x)+b+x
        sqrtss ${xmm~2}, ${xmm~2} // // x~2=sqrt(-2*b*x+b+x)
        mulss  ${xmm~1},${xmm~2} // x~1 = ( sqHalf* (1-b*2) )*sqrt(-2*b*x+b+x)
        addss ${xmm~1}, ${xmm~5} //  x~1 = b+ ( sqHalf* (1-b*2) )*sqrt(-2*b*x+b+x) || FINAL!

        mov [rsp+10], 3F800000 //1
        mov [rsp+14], 3F800000 //1
        mov [rsp+18], 3F800000 //1
        mov [rsp+1C], 3F800000 //1

        movups ${xmm~4}, [rsp+10] //x~4={1,1,1,1}
    ${stack_pop}(20)

    mulss  ${xmm~4},  [${varis_1_n}+4] //{r,1,1,1}
    movss  ${xmm~3},  [${varis_1_n}] //u
    subss  ${xmm~3},  ${xmm~4}
    mulss  ${xmm~4},  ${xmm~1} //mul by adj_x
    addss  ${xmm~4},  ${xmm~4}
    addss  ${xmm~4},  ${xmm~3} //FINAL MULT in x~4 !
    pslldq ${xmm~4},8 //(?,r,~,~)
    ${stack_push}(20)
        movdqu [rsp], ${xmm~4}
        mov [rsp], 3F800000 //1
        mov [rsp+4], 3F800000 //1
        mov [rsp+C], 3F800000 //1
        movups ${xmm~4}, [rsp] ////(1,r,r,1)
    ${stack_pop}(20)

    ${pop_xmm}(0)
	$%s{og_instruction}  //loads 4 x floats into $%s{x_reg}
	mulps ${x_reg},${xmm~4}

    ${pop_xmm}(5)
    ${pop_xmm}(4)
    ${pop_xmm}(3)
    ${pop_xmm}(2)
    ${pop_xmm}(1)
    pop rax
    pop rbx
    pop rcx
      $%s{overwritten}
	  jmp return

	$%s{inj_name}:
	  jmp $%s{newmem_name}
	  $%s{post_jmp}
      return:
]]

[ENABLE]
opcode_inj.inject(script_ref,inj_name,newmem_name,newmem_size,vars,inj_script,pattern,aobs,lookahead_n,parts,module_names)

[DISABLE]
opcode_inj.disable(script_ref)
opcode_inj[script_ref]=nil
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>642</ID>
              <Description>"Left arm mean"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>mult_la</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>643</ID>
              <Description>"Left arm range"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>mult_la+4</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>644</ID>
          <Description>"Twist (left) + Right arm"</Description>
          <Options moHideChildren="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
if syntaxcheck then return end
local vars={}
--OPTIONAL (Add as named element of 'vars' table to use in '$%s{...}' notation)
local suffix='_ra'
vars.varis_1_n='mult'..suffix

local m1=1 -- Right arm mean
local r1=0 -- Right arm range
local m2=1 -- Twist (left) mean
local r2=0 -- Twist (left) range

vars.varis_1_d='dd (float)'..m1..'\ndd (float)'..r1..'\ndd (float)'..m2..'\ndd (float)'..r2
vars.varis_1_size=16
local parts={{'[^%]]+',1,'localAddress'},{'%d+',1,'xreg_n'},{'xmm%d+',1,'x_reg'},{'mov.+',1,'mov_op'}}
local module_names='PES2021.exe'
vars.post={}

vars.post[1]=function() --gives names "xmm~1" to "xmm~15" to all registers that are not 'x_reg'
 local xn=tonumber(vars.xreg_n)
 local c=1
 for i=0,15 do
  if xn~=i then
   vars['xmm~'..c]='xmm'..i
   c=c+1
  end
 end
 return vars --IMPORTANT!
end

-- token functions (below) run after ['post'] functions
vars['push_xmm']=function(n) -- n, as all arguments used for token functions, is necessarily a string!
    local s='sub rsp,10\nmovdqu [rsp], '
    if n=='0' then
		return s .. vars['x_reg']
	else
		return s .. vars['xmm~'..n]
	end
end

vars['pop_xmm']=function(n) -- n, as all arguments used for token functions, is necessarily a string!
    local s=',[rsp]\nadd rsp,10'
    if n=='0' then
		return 'movdqu '..vars['x_reg'] .. s
	else
		return 'movdqu '..vars['xmm~'..n] .. s
	end
end

vars['stack_push']=function(n) -- n, as all arguments used for token functions, is necessarily a string!
		return 'sub rsp, ' .. n
end

vars['stack_pop']=function(n) -- n, as all arguments used for token functions, is necessarily a string!
		return 'add rsp, ' .. n
end

--COMPULSORY
local newmem_name='newmem'..suffix
local newmem_size='$1000'
local script_ref='Twist_left_right_arm' --  opcode_inj[vars.script_ref] stores vars
local inj_name='INJECT'..suffix
local pattern='^%s*mov.+%s*xmm%d+,%s*%[[^%]]+%]'
local aobs={'41 0F 28 C0 48 8B BC 24 88 00 00 00 41 8B CB',-32,0}
local lookahead_n=32

local inj_script=[[
	define(${inj_name},${address_string})
    registersymbol(${inj_name})
    alloc(${newmem_name}, ${newmem_size}, ${inj_name})
	alloc(${varis_1_n}, $%d{varis_1_size}, ${inj_name})
    registersymbol(${varis_1_n})
	${varis_1_n}:
	${varis_1_d}

	label(code)
	label(return)

	${newmem_name}:
	code:
    ${push_xmm}(6)
    push rcx
    push rbx
    push rax
    ${push_xmm}(8)
    ${push_xmm}(7)
    ${push_xmm}(4)
    ${push_xmm}(1)
    ${push_xmm}(2)
    ${push_xmm}(3)
    ${push_xmm}(5)
    ${push_xmm}(0)

${stack_push}(18)
    mov rax,[7FFE0014] //Windows internal clock
    mov rbx,rax
    shl rbx,6
    mov rcx,rax
    shl rcx,18
    imul rcx,rbx
    imul rcx,rax
    shr rcx,20 //ecx has the number

    cvtsi2ss ${xmm~7}, rcx
    cvtss2sd ${xmm~7}, ${xmm~7}

        mov [rsp],FFE00000
        mov [rsp+4],41EFFFFF //move max_float into stack
        divsd ${xmm~7}, [rsp] //div by max float (in double precision)


    cvtsd2ss ${xmm~7}, ${xmm~7} //random float in ${xmm~7}

    cvtss2si ecx, ${xmm~7}  //b as int
    cvtsi2ss  ${xmm~8}, ecx // b

    movss ${x_reg},${xmm~7}
    movss ${xmm~5},${xmm~8}

    //ROUND 2

    mov rbx,[7FFE0014] //Windows internal clock
    mov rbx,rax
    shl rbx,6
    mov rcx,rax
    shl rcx,18
    imul rcx,rbx
    imul rcx,rax
    shr rcx,20 //ecx has the number

    cvtsi2ss ${xmm~7}, rcx
    cvtss2sd ${xmm~7}, ${xmm~7}

        divsd ${xmm~7}, [rsp] //div by max float (in double precision)

    cvtsd2ss ${xmm~7}, ${xmm~7} //random float in ${xmm~7}

    cvtss2si ecx, ${xmm~7}  //b as int
    cvtsi2ss  ${xmm~8}, ecx // b

    pslldq ${x_reg},4
    movss ${x_reg},${xmm~7}
     pslldq ${xmm~5},4
    movss ${xmm~5},${xmm~8}

        mov [rsp+8], C0000000 //-2
        mov [rsp+C], 3F800000 //1
        mov [rsp+10], 40000000 //2
        mov [rsp+14], 3F3504F3 //sqHalf

        movss ${xmm~1},  [rsp+14] //sqHalf
        shufps ${xmm~1},${xmm~1},0 // every element := [0]
        movss ${xmm~2}, [rsp+8] //-2
        shufps ${xmm~2},${xmm~2},0 // every element := [0]
        movss ${xmm~3}, [rsp+C] //1
        shufps ${xmm~3},${xmm~3},0 // every element := [0]
        movss ${xmm~4}, [rsp+10] //2
        shufps ${xmm~4},${xmm~4},0 // every element := [0]

        mulps ${xmm~4}, ${xmm~5} //x~4=b*2
        subps ${xmm~3}, ${xmm~4} // x~3=1-b*2
        mulps ${xmm~1}, ${xmm~3} // x~1 = ( sqHalf* (1-b*2) )
        mulps ${xmm~2}, ${xmm~5} //x~2 = -2*b
        mulps ${xmm~2}, ${x_reg} // x~2=(-2*b)*x
        addps ${xmm~2}, ${xmm~5}//x~2=(-2*b*x)+b
        addps ${xmm~2}, ${x_reg} // x~2=(-2*b*x)+b+x
        sqrtps ${xmm~2}, ${xmm~2} // // x~2=sqrt(-2*b*x+b+x)
        mulps  ${xmm~1},${xmm~2} // x~1 = ( sqHalf* (1-b*2) )*sqrt(-2*b*x+b+x)
        addps ${xmm~1}, ${xmm~5} //  x~1 = b+ ( sqHalf* (1-b*2) )*sqrt(-2*b*x+b+x) || FINAL!


	movss ${xmm~5}, [${varis_1_n}+C]
    movss ${xmm~4}, ${xmm~5}
	pslldq ${xmm~4},4
	movss ${xmm~5}, [${varis_1_n}+4]
    movss ${xmm~4}, ${xmm~5}


    movss ${xmm~5}, [${varis_1_n}+8]
    movss ${xmm~3}, ${xmm~5}
	pslldq ${xmm~3},4
	movss ${xmm~5}, [${varis_1_n}]
    movss ${xmm~3}, ${xmm~5}

    subps  ${xmm~3},  ${xmm~4}
    mulps  ${xmm~4},  ${xmm~1} //mul by adj_x
    addps  ${xmm~4},  ${xmm~4}
    addps  ${xmm~4},  ${xmm~3} //FINAL MULTS in x~4 !

    movups ${xmm~6}, ${xmm~4} // (~,~,r,r)
    pslldq ${xmm~6},4 //(~,r,r,~)

        movdqu [rsp], ${xmm~6}
        mov [rsp], 3F800000 //1
        mov [rsp+C], 3F800000 //1
        movups ${xmm~6}, [rsp] ////(1,r,r,1)
    ${stack_pop}(18)

    ${pop_xmm}(0)
    ${pop_xmm}(5)
    ${pop_xmm}(3)
    ${pop_xmm}(2)
    ${pop_xmm}(1)
    ${pop_xmm}(4)
    ${pop_xmm}(7)
    ${pop_xmm}(8)
    pop rax
    pop rbx
    pop rcx
      ${og_instruction}
      mulps ${x_reg},${xmm~6}
      ${pop_xmm}(6)
      ${overwritten}
	  jmp return

	${inj_name}:
	  jmp ${newmem_name}
	  ${post_jmp}
	return:
]]

[ENABLE]
opcode_inj.inject(script_ref,inj_name,newmem_name,newmem_size,vars,inj_script,pattern,aobs,lookahead_n,parts,module_names)

[DISABLE]
opcode_inj.disable(script_ref)
opcode_inj[script_ref]=nil
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>677</ID>
              <Description>"Right arm mean"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>mult_ra</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>678</ID>
              <Description>"Right arm range"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>mult_ra+4</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>647</ID>
              <Description>"Twist (left) mean"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>mult_ra+8</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>648</ID>
              <Description>"Twist (left) range"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>mult_ra+C</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>649</ID>
          <Description>"Legs dist from body"</Description>
          <Options moHideChildren="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
if syntaxcheck then return end
local vars={}
--OPTIONAL (Add as named element of 'vars' table to use in '$%s{...}' notation)
local suffix='_d'

vars.varis_1_n='mult'..suffix

local m1=1 -- mean
local r1=0 -- range

vars.varis_1_d='dd (float)'..m1..'\ndd (float)'..r1
vars.varis_1_size=8   --(u +0, r +4)

vars.push_xmm='sub rsp,10\nmovdqu [rsp],'
vars.pop_xmm=',[rsp]\nadd rsp,10'

local parts={{'[^%]]+',1,'localAddress'},{'%d+',1,'xreg_n'},{'xmm%d+',1,'x_reg'},{'mov.+',1,'mov_op'}}
local module_names='PES2021.exe'
vars.post={}

vars.post[1]=function() --gives names "xmm~1" to "xmm~15" to all registers that are not 'x_reg'
 local xn=tonumber(vars.xreg_n)
 local c=1
 for i=0,15 do
  if xn~=i then
   vars['xmm~'..c]='xmm'..i
   c=c+1
  end
 end
 return vars --IMPORTANT!
end

-- token functions (below) run after ['post'] functions
vars['push_xmm']=function(n) -- n, as all arguments used for token functions, is necessarily a string!
    local s='sub rsp,10\nmovdqu [rsp], '
    if n=='0' then
		return s .. vars['x_reg']
	else
		return s .. vars['xmm~'..n]
	end
end

vars['pop_xmm']=function(n) -- n, as all arguments used for token functions, is necessarily a string!
    local s=',[rsp]\nadd rsp,10'
    if n=='0' then
		return 'movdqu '..vars['x_reg'] .. s
	else
		return 'movdqu '..vars['xmm~'..n] .. s
	end
end

vars['stack_push']=function(n) -- n, as all arguments used for token functions, is necessarily a string!
		return 'sub rsp, ' .. n
end

vars['stack_pop']=function(n) -- n, as all arguments used for token functions, is necessarily a string!
		return 'add rsp, ' .. n
end

--COMPULSORY
local newmem_name='newmem'..suffix
local newmem_size='$1000'
local script_ref='Legs_dist_body' --  opcode_inj[vars.script_ref] stores vars
local inj_name='INJECT'..suffix
local pattern='^%s*mov.+%s*xmm%d+,%s*%[[^%]]+%]'
local aobs={'FF FF FF FF 48 89 44 24 24 89 44 24 2C 0F 28 4C 24 20 0F 54 C1',-32,0}
local lookahead_n=32

local inj_script=[[
	  define(${inj_name},${address_string})
  registersymbol(${inj_name})
  alloc(${newmem_name}, ${newmem_size}, ${inj_name})

  alloc(${varis_1_n}, $%d{varis_1_size}, ${inj_name})
  registersymbol(${varis_1_n})
  ${varis_1_n}:
  ${varis_1_d}

  label(code)
  label(return)

  ${newmem_name}:
  code:
    push rcx
    push rbx
    push rax

    mov rax,[7FFE0014] //Windows internal clock
    mov rbx,rax
    shl rbx,6
    mov rcx,rax
    shl rcx,18
    imul rcx,rbx
    imul rcx,rax
    shr rcx,20 //ecx has the number
 ${push_xmm}(1)
    ${push_xmm}(2)
    ${push_xmm}(3)
    ${push_xmm}(4)
    ${push_xmm}(5)
    ${push_xmm}(0)

    cvtsi2ss ${x_reg}, rcx
    cvtss2sd ${x_reg}, ${x_reg}

    ${stack_push}(8)
        mov [rsp],FFE00000
        mov [rsp+4],41EFFFFF //move max_float into stack
        divsd ${x_reg}, [rsp] //div by max float (in double precision)
    ${stack_pop}(8)

    cvtsd2ss ${x_reg}, ${x_reg} //random float in ${x_reg}

    cvtss2si ecx, ${x_reg}  //b as int
    cvtsi2ss  ${xmm~5}, ecx // b

    ${stack_push}(20)
        mov [rsp], C0000000 //-2
        mov [rsp+4], 3F800000 //1
        mov [rsp+8], 40000000 //2
        mov [rsp+C], 3F3504F3 //sqHalf

        movss ${xmm~1},  [rsp+C] //sqHalf
        movss ${xmm~2}, [rsp] //-2
        movss ${xmm~3}, [rsp+4] //1
        movss ${xmm~4}, [rsp+8] //2

        mulss ${xmm~4}, ${xmm~5} //x~4=b*2
        subss ${xmm~3}, ${xmm~4} // x~3=1-b*2
        mulss ${xmm~1}, ${xmm~3} // x~1 = ( sqHalf* (1-b*2) )
        mulss ${xmm~2}, ${xmm~5} //x~2 = -2*b
        mulss ${xmm~2}, ${x_reg} // x~2=(-2*b)*x
        addss ${xmm~2}, ${xmm~5}//x~2=(-2*b*x)+b
        addss ${xmm~2}, ${x_reg} // x~2=(-2*b*x)+b+x
        sqrtss ${xmm~2}, ${xmm~2} // // x~2=sqrt(-2*b*x+b+x)
        mulss  ${xmm~1},${xmm~2} // x~1 = ( sqHalf* (1-b*2) )*sqrt(-2*b*x+b+x)
        addss ${xmm~1}, ${xmm~5} //  x~1 = b+ ( sqHalf* (1-b*2) )*sqrt(-2*b*x+b+x) || FINAL!

        mov [rsp+10], 3F800000 //1
        mov [rsp+14], 3F800000 //1
        mov [rsp+18], 3F800000 //1
        mov [rsp+1C], 3F800000 //1

        movups ${xmm~4}, [rsp+10] //x~4={1,1,1,1}
    ${stack_pop}(20)

    mulss  ${xmm~4},  [${varis_1_n}+4] //{r,1,1,1}
    movss  ${xmm~3},  [${varis_1_n}] //u
    subss  ${xmm~3},  ${xmm~4}
    mulss  ${xmm~4},  ${xmm~1} //mul by adj_x
    addss  ${xmm~4},  ${xmm~4}
    addss  ${xmm~4},  ${xmm~3} //FINAL MULT in x~4 !

    ${pop_xmm}(0)
	$%s{og_instruction}  //loads 4 x floats into $%s{x_reg}
	mulps ${x_reg},${xmm~4}

    ${pop_xmm}(5)
    ${pop_xmm}(4)
    ${pop_xmm}(3)
    ${pop_xmm}(2)
    ${pop_xmm}(1)
    pop rax
    pop rbx
    pop rcx
      $%s{overwritten}
	  jmp return

	$%s{inj_name}:
	  jmp $%s{newmem_name}
	  $%s{post_jmp}
	return:
]]

[ENABLE]
opcode_inj.inject(script_ref,inj_name,newmem_name,newmem_size,vars,inj_script,pattern,aobs,lookahead_n,parts,module_names)

[DISABLE]
opcode_inj.disable(script_ref)
opcode_inj[script_ref]=nil
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>650</ID>
              <Description>"Distance mean"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>mult_d</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>651</ID>
              <Description>"Distance range"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>mult_d+4</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>679</ID>
          <Description>"Animation change"</Description>
          <Options moHideChildren="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
if syntaxcheck then return end
local vars={}
--OPTIONAL (Add as named element of 'vars' table to use in '$%s{...}' notation)
local suffix='_anim'
vars.varis_1_n='mult_1'

local m1=1 -- Arms in/out mean
local r1=0 -- Arms in/out range
local m2=1 -- Arms dist mean
local r2=0 -- Arms dist range
local m3=1 -- Lean avg
local r3=0 -- Lean range

vars.varis_1_d='dd (float)'..m1..'\ndd (float)'..r1..'\ndd (float)'..m2..'\ndd (float)'..r2..'\ndd (float)'..m3..'\ndd (float)'..r3
vars.varis_1_size=24
local parts={{'[^%]]+',1,'localAddress'},{'%d+',1,'xreg_n'},{'xmm%d+',1,'x_reg'},{'mov.+',1,'mov_op'}}
local module_names='PES2021.exe'
vars.post={}

vars.post[1]=function() --gives names "xmm~1" to "xmm~15" to all registers that are not 'x_reg'
 local xn=tonumber(vars.xreg_n)
 local c=1
 for i=0,15 do
  if xn~=i then
   vars['xmm~'..c]='xmm'..i
   c=c+1
  end
 end
 return vars --IMPORTANT!
end

-- token functions (below) run after ['post'] functions
vars['push_xmm']=function(n) -- n, as all arguments used for token functions, is necessarily a string!
    local s='sub rsp,10\nmovdqu [rsp], '
    if n=='0' then
		return s .. vars['x_reg']
	else
		return s .. vars['xmm~'..n]
	end
end

vars['pop_xmm']=function(n) -- n, as all arguments used for token functions, is necessarily a string!
    local s=',[rsp]\nadd rsp,10'
    if n=='0' then
		return 'movdqu '..vars['x_reg'] .. s
	else
		return 'movdqu '..vars['xmm~'..n] .. s
	end
end

vars['stack_push']=function(n) -- n, as all arguments used for token functions, is necessarily a string!
		return 'sub rsp, ' .. n
end

vars['stack_pop']=function(n) -- n, as all arguments used for token functions, is necessarily a string!
		return 'add rsp, ' .. n
end

--COMPULSORY
local newmem_name='newmem'..suffix
local newmem_size='$2000'
local script_ref='Animation_change' --  opcode_inj[vars.script_ref] stores vars
local inj_name='INJECT'..suffix
local pattern='^%s*mov.+%s*xmm%d+,%s*%[[^%]]+%]'
local aobs={'0F 28 44 24 20 41 0F 29 07 48 8B 4C 24 30',-10,16}
local lookahead_n=32

local inj_script=[[
define(${inj_name},${address_string})
    registersymbol(${inj_name})
    alloc(${newmem_name}, ${newmem_size}, ${inj_name})
	alloc(${varis_1_n}, $%d{varis_1_size}, ${inj_name})
    registersymbol(${varis_1_n})
	${varis_1_n}:
	${varis_1_d}

	label(code)
	label(return)

	${newmem_name}:
	code:
	    ${push_xmm}(9) //-10
		    movaps ${xmm~9},[${localAddress}+10]
	    ${push_xmm}(7)
${push_xmm}(6)
    push rcx
    push rbx
    push rax
	    ${push_xmm}(8)
    ${push_xmm}(4)
    ${push_xmm}(1)
    ${push_xmm}(2)
    ${push_xmm}(3)
    ${push_xmm}(5)
    ${push_xmm}(0)

${stack_push}(18)
    mov rax,[7FFE0014] //Windows internal clock
    mov rbx,rax
    shl rbx,6
    mov rcx,rax
    shl rcx,18
    imul rcx,rbx
    imul rcx,rax
    shr rcx,20 //ecx has the number

    cvtsi2ss ${xmm~7}, rcx
    cvtss2sd ${xmm~7}, ${xmm~7}

        mov [rsp],FFE00000
        mov [rsp+4],41EFFFFF //move max_float into stack
        divsd ${xmm~7}, [rsp] //div by max float (in double precision)


    cvtsd2ss ${xmm~7}, ${xmm~7} //random float in ${xmm~7}
	//pslldq ${x_reg},4
	movss ${x_reg}, ${xmm~7}

	cvtss2si ecx, ${xmm~7}  //b as int
    cvtsi2ss  ${xmm~8}, ecx // b
	//pslldq ${xmm~5},4
	movss ${xmm~5}, ${xmm~8}

    //ROUND 2

    mov rbx,[7FFE0014] //Windows internal clock
    mov rbx,rax
    shl rbx,6
    mov rcx,rax
    shl rcx,18
    imul rcx,rbx
    imul rcx,rax
    shr rcx,20 //ecx has the number

    cvtsi2ss ${xmm~7}, rcx
    cvtss2sd ${xmm~7}, ${xmm~7}

        mov [rsp],FFE00000
        mov [rsp+4],41EFFFFF //move max_float into stack
        divsd ${xmm~7}, [rsp] //div by max float (in double precision)


    cvtsd2ss ${xmm~7}, ${xmm~7} //random float in ${xmm~7}
	pslldq ${x_reg},4
	movss ${x_reg}, ${xmm~7}

	cvtss2si ecx, ${xmm~7}  //b as int
    cvtsi2ss  ${xmm~8}, ecx // b
	pslldq ${xmm~5},4
	movss ${xmm~5}, ${xmm~8}

	//ROUND 3

    mov rax,[7FFE0014] //Windows internal clock
    mov rbx,rax
    shl rbx,6
    mov rcx,rax
    shl rcx,18
    imul rcx,rbx
    imul rcx,rax
    shr rcx,20 //ecx has the number

    cvtsi2ss ${xmm~7}, rcx
    cvtss2sd ${xmm~7}, ${xmm~7}

        mov [rsp],FFE00000
        mov [rsp+4],41EFFFFF //move max_float into stack
        divsd ${xmm~7}, [rsp] //div by max float (in double precision)


    cvtsd2ss ${xmm~7}, ${xmm~7} //random float in ${xmm~7}
	pslldq ${x_reg},4
	movss ${x_reg}, ${xmm~7} // x_reg: (~,r,r,r)

    cvtss2si ecx, ${xmm~7}  //b as int
    cvtsi2ss  ${xmm~8}, ecx // b
	pslldq ${xmm~5},4
	movss ${xmm~5}, ${xmm~8} // x~5: (~,r,r,r)

	mov [rsp+8], C0000000 //-2
	mov [rsp+C], 3F800000 //1
	mov [rsp+10], 40000000 //2
	mov [rsp+14], 3F3504F3 //sqHalf

	movss ${xmm~1},  [rsp+14] //sqHalf
	shufps ${xmm~1},${xmm~1},0 // every element := [0]
	movss ${xmm~2}, [rsp+8] //-2
	shufps ${xmm~2},${xmm~2},0 // every element := [0]
	movss ${xmm~3}, [rsp+C] //1
	shufps ${xmm~3},${xmm~3},0 // every element := [0]
	movss ${xmm~4}, [rsp+10] //2
	shufps ${xmm~4},${xmm~4},0 // every element := [0]

	mulps ${xmm~4}, ${xmm~5} //x~4=b*2
	subps ${xmm~3}, ${xmm~4} // x~3=1-b*2
	mulps ${xmm~1}, ${xmm~3} // x~1 = ( sqHalf* (1-b*2) )
	mulps ${xmm~2}, ${xmm~5} //x~2 = -2*b
	mulps ${xmm~2}, ${x_reg} // x~2=(-2*b)*x
	addps ${xmm~2}, ${xmm~5}//x~2=(-2*b*x)+b
	addps ${xmm~2}, ${x_reg} // x~2=(-2*b*x)+b+x
	sqrtps ${xmm~2}, ${xmm~2} // // x~2=sqrt(-2*b*x+b+x)
	mulps  ${xmm~1},${xmm~2} // x~1 = ( sqHalf* (1-b*2) )*sqrt(-2*b*x+b+x)
	addps ${xmm~1}, ${xmm~5} //  x~1 = b+ ( sqHalf* (1-b*2) )*sqrt(-2*b*x+b+x) || FINAL!

	movss ${xmm~5}, [${varis_1_n}+4]
    movss ${xmm~4}, ${xmm~5} // (~,~,~,g)
	pslldq ${xmm~4},4 // (~,~,g,~)
	movss ${xmm~5}, [${varis_1_n}+C]
	movss ${xmm~4}, ${xmm~5} // (~,~,g,g)
	pslldq ${xmm~4},4 // (~,g,g,~)
    movss ${xmm~5}, [${varis_1_n}+14]
    movss ${xmm~4}, ${xmm~5} // (~,g,g,g)

	movss ${xmm~5}, [${varis_1_n}]
    movss ${xmm~3}, ${xmm~5} // (~,~,~,u)
	pslldq ${xmm~3},4 // (~,~,u,~)
	movss ${xmm~5}, [${varis_1_n}+8]
	movss ${xmm~3}, ${xmm~5} // (~,~,u,u)
	pslldq ${xmm~3},4 // (~,u,u,~)
    movss ${xmm~5}, [${varis_1_n}+10]
    movss ${xmm~3}, ${xmm~5} // (~,u,u,u)

	subps  ${xmm~3},  ${xmm~4}
    mulps  ${xmm~4},  ${xmm~1} //mul by adj_x
    addps  ${xmm~4},  ${xmm~4}
    addps  ${xmm~4},  ${xmm~3} //FINAL MULTS in x~4 !

	movdqu [rsp], ${xmm~4}
	mov [rsp+C], 3F800000 //1
	movups ${xmm~6}, [rsp] ////(1,mlt,mlt,mlt)

 ${stack_pop}(18)
    ${pop_xmm}(0)
    mulps ${xmm~9},${xmm~6}
    movups ${x_reg},${xmm~9}
    ${pop_xmm}(5)
    ${pop_xmm}(3)
    ${pop_xmm}(2)
    ${pop_xmm}(1)
    ${pop_xmm}(4)
    ${pop_xmm}(8)
    pop rax
    pop rbx
    pop rcx
      //${og_instruction}
      ${pop_xmm}(6)
	      ${pop_xmm}(7)
	      ${pop_xmm}(9)
      ${overwritten}
	  jmp return

	${inj_name}:
	  jmp ${newmem_name}
	  ${post_jmp}
	return:
]]

[ENABLE]
opcode_inj.inject(script_ref,inj_name,newmem_name,newmem_size,vars,inj_script,pattern,aobs,lookahead_n,parts,module_names)

[DISABLE]
opcode_inj.disable(script_ref)
opcode_inj[script_ref]=nil
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>680</ID>
              <Description>"Arms in/out average"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>mult_1</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>681</ID>
              <Description>"Arms in/out range"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>mult_1+4</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>682</ID>
              <Description>"Arm distance from body average"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>mult_1+8</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>683</ID>
              <Description>"Arm distance from body range"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>mult_1+C</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>684</ID>
              <Description>"Lean average"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>mult_1+10</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>685</ID>
              <Description>"Lean range"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>mult_1+14</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>686</ID>
          <Description>"Animation speed"</Description>
          <Options moHideChildren="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
if syntaxcheck then return end
local vars={}
--OPTIONAL (Add as named element of 'vars' table to use in '$%s{...}' notation)
local suffix='_5'
vars.varis_1_n='mult'..suffix

local m1=1 -- mean
local r1=0 -- range

vars.varis_1_d='dd (float)'..m1..'\ndd (float)'..r1
vars.varis_1_size=8   --(u +0, r +4, 0.5 +8, 1+C)

local parts={{'[^%]]+',1,'localAddress'},{'%d+',1,'xreg_n'},{'xmm%d+',1,'x_reg'},{'mov.+',1,'mov_op'}}
local module_names='PES2021.exe'
vars.post={}

vars.post[1]=function() --gives names "xmm~1" to "xmm~15" to all registers that are not 'x_reg'
 local xn=tonumber(vars.xreg_n)
 local c=1
 for i=0,15 do
  if xn~=i then
   vars['xmm~'..c]='xmm'..i
   c=c+1
  end
 end
 return vars --IMPORTANT!
end

-- token functions (below) run after ['post'] functions
vars['push_xmm']=function(n) -- n, as all arguments used for token functions, is necessarily a string!
    local s='sub rsp,10\nmovdqu [rsp], '
    if n=='0' then
		return s .. vars['x_reg']
	else
		return s .. vars['xmm~'..n]
	end
end

vars['pop_xmm']=function(n) -- n, as all arguments used for token functions, is necessarily a string!
    local s=',[rsp]\nadd rsp,10'
    if n=='0' then
		return 'movdqu '..vars['x_reg'] .. s
	else
		return 'movdqu '..vars['xmm~'..n] .. s
	end
end

vars['stack_push']=function(n) -- n, as all arguments used for token functions, is necessarily a string!
		return 'sub rsp, ' .. n
end

vars['stack_pop']=function(n) -- n, as all arguments used for token functions, is necessarily a string!
		return 'add rsp, ' .. n
end

--COMPULSORY
local newmem_name='newmem'..suffix
local newmem_size='$1000'
local script_ref='Animation_speed' --  opcode_inj[vars.script_ref] stores vars
local inj_name='INJECT'..suffix
local pattern='^%s*movss%s*%[[^%]]+%]%s*,%s*xmm%d+'
local aobs={'48 8B 40 10 F3 0F 11 48 44',0,16}
local lookahead_n=32

local inj_script=[[
  define(${inj_name},${address_string})
  registersymbol(${inj_name})
  alloc(${newmem_name}, ${newmem_size}, ${inj_name})

  alloc(${varis_1_n}, $%d{varis_1_size}, ${inj_name})
  registersymbol(${varis_1_n})
  ${varis_1_n}:
  ${varis_1_d}

  label(code)
  label(return)

  ${newmem_name}:
  code:
    push rcx
    push rbx
    push rax

    mov rax,[7FFE0014] //Windows internal clock
    mov rbx,rax
    shl rbx,6
    mov rcx,rax
    shl rcx,18
    imul rcx,rbx
    imul rcx,rax
    shr rcx,20 //ecx has the number
 ${push_xmm}(1)
    ${push_xmm}(2)
    ${push_xmm}(3)
    ${push_xmm}(4)
    ${push_xmm}(5)
    ${push_xmm}(0)

    cvtsi2ss ${x_reg}, rcx
    cvtss2sd ${x_reg}, ${x_reg}

    ${stack_push}(8)
        mov [rsp],FFE00000
        mov [rsp+4],41EFFFFF //move max_float into stack
        divsd ${x_reg}, [rsp] //div by max float (in double precision)
    ${stack_pop}(8)

    cvtsd2ss ${x_reg}, ${x_reg} //random float in ${x_reg}

    cvtss2si ecx, ${x_reg}  //b as int
    cvtsi2ss  ${xmm~5}, ecx // b

    ${stack_push}(10)
        mov [rsp], C0000000 //-2
        mov [rsp+4], 3F800000 //1
        mov [rsp+8], 40000000 //2
        mov [rsp+C], 3F3504F3 //sqHalf

        movss ${xmm~1},  [rsp+C] //sqHalf
        movss ${xmm~2}, [rsp] //-2
        movss ${xmm~3}, [rsp+4] //1
        movss ${xmm~4}, [rsp+8] //2

        mulss ${xmm~4}, ${xmm~5} //x~4=b*2
        subss ${xmm~3}, ${xmm~4} // x~3=1-b*2
        mulss ${xmm~1}, ${xmm~3} // x~1 = ( sqHalf* (1-b*2) )
        mulss ${xmm~2}, ${xmm~5} //x~2 = -2*b
        mulss ${xmm~2}, ${x_reg} // x~2=(-2*b)*x
        addss ${xmm~2}, ${xmm~5}//x~2=(-2*b*x)+b
        addss ${xmm~2}, ${x_reg} // x~2=(-2*b*x)+b+x
        sqrtss ${xmm~2}, ${xmm~2} // // x~2=sqrt(-2*b*x+b+x)
        mulss  ${xmm~1},${xmm~2} // x~1 = ( sqHalf* (1-b*2) )*sqrt(-2*b*x+b+x)
        addss ${xmm~1}, ${xmm~5} //  x~1 = b+ ( sqHalf* (1-b*2) )*sqrt(-2*b*x+b+x) || FINAL!
    ${stack_pop}(10)

    movss  ${xmm~4},  [${varis_1_n}+4]
    movss  ${xmm~3},  [${varis_1_n}] //u
    subss  ${xmm~3},  ${xmm~4}
    mulss  ${xmm~4},  ${xmm~1} //mul by adj_x
    addss  ${xmm~4},  ${xmm~4}
    addss  ${xmm~4},  ${xmm~3} //FINAL MULT in x~4 !

    ${pop_xmm}(0)
	mulss ${x_reg},${xmm~4}
    ${pop_xmm}(5)
    ${pop_xmm}(4)
    ${pop_xmm}(3)
    ${pop_xmm}(2)
    ${pop_xmm}(1)
    pop rax
    pop rbx
    pop rcx
    ${og_instruction}

    ${overwritten}
    jmp return

  ${inj_name}:
  jmp ${newmem_name}
  ${post_jmp}
  return:
]]

[ENABLE]
opcode_inj.inject(script_ref,inj_name,newmem_name,newmem_size,vars,inj_script,pattern,aobs,lookahead_n,parts,module_names)

[DISABLE]
opcode_inj.disable(script_ref)
opcode_inj[script_ref]=nil
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>687</ID>
              <Description>"Speed mean"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>mult_5</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>688</ID>
              <Description>"Speed range"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>mult_5+4</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>689</ID>
          <Description>"Pre-kick rush onto ball"</Description>
          <Options moHideChildren="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
if syntaxcheck then return end
local vars={}
--OPTIONAL (Add as named element of 'vars' table to use in '$%s{...}' notation)
local suffix='_2'
vars.varis_1_n='mult'..suffix

local rush=0.9964
vars.varis_1_d='dd (float)'..rush
vars.varis_1_size=4
local parts={{'[^%]]+',1,'localAddress'},{'%d+',1,'xreg_n'},{'xmm%d+',1,'x_reg'},{'mov.+',1,'mov_op'}}
local module_names='PES2021.exe'

--COMPULSORY
local newmem_name='newmem'..suffix
local newmem_size='$1000'
local script_ref='Pre_kick_rush' --  opcode_inj[vars.script_ref] stores vars
local inj_name='INJECT'..suffix
local pattern='^%s*movss%s*%[[^%]]+%]%s*,%s*xmm%d+'
local aobs={'F3 41 0F 11 5C 24 0C 48',-10,20}
local lookahead_n=32

local inj_script=[[
	define($%s{inj_name},$%s{address_string})
    registersymbol($%s{inj_name})
    alloc($%s{newmem_name}, $%s{newmem_size}, $%s{inj_name})
	alloc($%s{varis_1_n}, $%d{varis_1_size}, $%s{inj_name})
    registersymbol($%s{varis_1_n})
	$%s{varis_1_n}:
	$%s{varis_1_d}

	label(code)
	label(return)

	$%s{newmem_name}:
	code:
	  mulss $%s{x_reg},[$%s{varis_1_n}]
	  $%s{og_instruction}
      $%s{overwritten}
	  jmp return

	$%s{inj_name}:
	  jmp $%s{newmem_name}
	  $%s{post_jmp}
	return:
]]

[ENABLE]
opcode_inj.inject(script_ref,inj_name,newmem_name,newmem_size,vars,inj_script,pattern,aobs,lookahead_n,parts,module_names)

[DISABLE]
opcode_inj.disable(script_ref)
opcode_inj[script_ref]=nil
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>690</ID>
              <Description>"Acceleration"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>mult_2</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>691</ID>
          <Description>"Broadcast focus"</Description>
          <Options moHideChildren="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
if syntaxcheck then return end
local vars={}
--OPTIONAL (Add as named element of 'vars' table to use in '$%s{...}' notation)
local suffix='_bcc'
vars.varis_1_n='mult'..suffix

local focus=0.025
vars.varis_1_d='dd (float)'..focus
vars.varis_1_size=4
local parts={{'[^%]]+',1,'localAddress'},{'%d+',1,'xreg_n'},{'xmm%d+',1,'x_reg'},{'mov.+',1,'mov_op'}}
local module_names='PES2021.exe'
vars.post={}

vars.post[1]=function() --gives names "xmm~1" to "xmm~15" to all registers that are not 'x_reg'
 local xn=tonumber(vars.xreg_n)
 local c=1
 for i=0,15 do
  if xn~=i then
   vars['xmm~'..c]='xmm'..i
   c=c+1
  end
 end
 return vars --IMPORTANT!
end

-- token functions (below) run after ['post'] functions
vars['push_xmm']=function(n) -- n, as all arguments used for token functions, is necessarily a string!
    local s='sub rsp,10\nmovdqu [rsp], '
    if n=='0' then
		return s .. vars['x_reg']
	else
		return s .. vars['xmm~'..n]
	end
end

vars['pop_xmm']=function(n) -- n, as all arguments used for token functions, is necessarily a string!
    local s=',[rsp]\nadd rsp,10'
    if n=='0' then
		return 'movdqu '..vars['x_reg'] .. s
	else
		return 'movdqu '..vars['xmm~'..n] .. s
	end
end

vars['stack_push']=function(n) -- n, as all arguments used for token functions, is necessarily a string!
		return 'sub rsp, ' .. n
end

vars['stack_pop']=function(n) -- n, as all arguments used for token functions, is necessarily a string!
		return 'add rsp, ' .. n
end


--COMPULSORY
local newmem_name='newmem'..suffix
local newmem_size='$1000'
local script_ref='Broadcast_focus' --  opcode_inj[vars.script_ref] stores vars
local inj_name='INJECT'..suffix
local pattern='^%s*mov.ps%s*xmm%d+%s*,%s*%[%s*%a+%d*%s*%+%s*%a+%d+%s*%]'
local aobs={'48 6B C8 58 8B 43 08 42 0F 10',6,8}
local lookahead_n=64

local inj_script=[[
	define($%s{inj_name},$%s{address_string})
    registersymbol($%s{inj_name})
    alloc($%s{newmem_name}, $%s{newmem_size}, $%s{inj_name})
	alloc($%s{varis_1_n}, $%d{varis_1_size}, $%s{inj_name})
    registersymbol($%s{varis_1_n})
	$%s{varis_1_n}:
	$%s{varis_1_d}

	label(code)
	label(return)

	$%s{newmem_name}:
	code:
    ${push_xmm}(1)
    ${stack_push}(20)
        mov [rsp], 3F800000 //1
        mov [rsp+4], 3F800000 //1
        mov [rsp+8], 3F800000 //1

        movss ${xmm~1}, [rbx+18] //ball pos (width)
        mulss ${xmm~1}, [${varis_1_n}]
        movss [rsp+C], ${xmm~1} //adj focus
        movups ${xmm~1}, [rsp]

	  ${og_instruction}
      mulps ${x_reg},${xmm~1}
      ${stack_pop}(20)
      ${pop_xmm}(1)
      ${overwritten}
	  jmp return


	$%s{inj_name}:
	  jmp $%s{newmem_name}
	  $%s{post_jmp}
	return:
]]

[ENABLE]
opcode_inj.inject(script_ref,inj_name,newmem_name,newmem_size,vars,inj_script,pattern,aobs,lookahead_n,parts,module_names)

[DISABLE]
opcode_inj.disable(script_ref)
opcode_inj[script_ref]=nil
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>692</ID>
              <Description>"Focus"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>mult_bcc</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>693</ID>
          <Description>"Angle hijack (Stadium)"</Description>
          <Options moHideChildren="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
if syntaxcheck then return end
local vars={}
--OPTIONAL (Add as named element of 'vars' table to use in '$%s{...}' notation)
local suffix='_camAngle'
vars.varis_1_n='mult'..suffix

local angle=5
vars.varis_1_d='dd (float)'..angle
vars.varis_1_size=4
local parts={{'[^%]]+',1,'localAddress'},{'%d+',1,'xreg_n'},{'xmm%d+',1,'x_reg'},{'mov.+',1,'mov_op'}}
local module_names='PES2021.exe'
vars.post={}

vars.post[1]=function() --gives names "xmm~1" to "xmm~15" to all registers that are not 'x_reg'
 local xn=tonumber(vars.xreg_n)
 local c=1
 for i=0,15 do
  if xn~=i then
   vars['xmm~'..c]='xmm'..i
   c=c+1
  end
 end
 return vars --IMPORTANT!
end

-- token functions (below) run after ['post'] functions
vars['push_xmm']=function(n) -- n, as all arguments used for token functions, is necessarily a string!
    local s='sub rsp,10\nmovdqu [rsp], '
    if n=='0' then
		return s .. vars['x_reg']
	else
		return s .. vars['xmm~'..n]
	end
end

vars['pop_xmm']=function(n) -- n, as all arguments used for token functions, is necessarily a string!
    local s=',[rsp]\nadd rsp,10'
    if n=='0' then
		return 'movdqu '..vars['x_reg'] .. s
	else
		return 'movdqu '..vars['xmm~'..n] .. s
	end
end

vars['stack_push']=function(n) -- n, as all arguments used for token functions, is necessarily a string!
		return 'sub rsp, ' .. n
end

vars['stack_pop']=function(n) -- n, as all arguments used for token functions, is necessarily a string!
		return 'add rsp, ' .. n
end

--COMPULSORY
local newmem_name='newmem'..suffix
local newmem_size='$1000'
local script_ref='Hijack_angle' --  opcode_inj[vars.script_ref] stores vars
local inj_name='INJECT'..suffix
local pattern='^%s*movss%s*%[[^%]]+%]%s*,%s*xmm%d+'
local aobs={'40 10 F3 0F 11 48 14',0,4}
local lookahead_n=32

local inj_script=[[
	define($%s{inj_name},$%s{address_string})
    registersymbol($%s{inj_name})
    alloc($%s{newmem_name}, $%s{newmem_size}, $%s{inj_name})
	alloc($%s{varis_1_n}, $%d{varis_1_size}, $%s{inj_name})
    registersymbol($%s{varis_1_n})
	$%s{varis_1_n}:
	$%s{varis_1_d}

	label(code)
	label(return)

	$%s{newmem_name}:
	code:
	  mulss $%s{x_reg},[$%s{varis_1_n}]
	  $%s{og_instruction}
      $%s{overwritten}
	  jmp return

	$%s{inj_name}:
	  jmp $%s{newmem_name}
	  $%s{post_jmp}
	return:
]]

[ENABLE]
opcode_inj.inject(script_ref,inj_name,newmem_name,newmem_size,vars,inj_script,pattern,aobs,lookahead_n,parts,module_names)

{$asm}
aobscanmodule(INJECT_2,PES2021.exe,73 19 0F 2F CC 72) // should be unique
alloc(newmem_2,$1000,INJECT_2)

INJECT_2:
  db 90 90
registersymbol(INJECT_2)

aobscanmodule(INJECT_3,PES2021.exe,D6 01 76 45 F3 0F 10 05) // should be unique
alloc(newmem_3,$1000,INJECT_3)

INJECT_3:
  db D6 01 90 90
registersymbol(INJECT_3)


[DISABLE]
opcode_inj.disable(script_ref)
opcode_inj[script_ref]=nil

{$asm}
INJECT_2:
  db 73 19 0F 2F CC

unregistersymbol(INJECT_2)
dealloc(newmem_2)

INJECT_3:
  db D6 01 76 45

unregistersymbol(INJECT_3)
dealloc(newmem_3)

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>694</ID>
              <Description>"Angle mult"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>mult_camAngle</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>696</ID>
          <Description>"Smoother animation experiment"</Description>
          <Options moHideChildren="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
if syntaxcheck then return end
local vars={}
--OPTIONAL (Add as named element of 'vars' table to use in '$%s{...}' notation)
local suffix='_sma'
local parts={{'.+',1,'jne_address'}}
--COMPULSORY
local newmem_name='newmem'..suffix
local newmem_size='$1000'
local script_ref='Smooth_anim_exp' --  opcode_inj[vars.script_ref] stores vars
local inj_name='INJECT'..suffix
local pattern='^%s*jne%s+.+'
local aobs={'66 39 08 75 4A 41 81 BD 44 08 00 00 97 00 00 00',2,5}
local lookahead_n=32

local inj_script=[[

define(${inj_name},${address_string})
    registersymbol(${inj_name})
    alloc(${newmem_name}, ${newmem_size}, ${inj_name})

	label(code)
//label(return)

	$%s{newmem_name}:
	code:
    jmp ${jne_address}

	$%s{inj_name}:
	  jmp ${newmem_name}
	  ${post_jmp}
	//return:

]]

[ENABLE]
opcode_inj.inject(script_ref,inj_name,newmem_name,newmem_size,vars,inj_script,pattern,aobs,lookahead_n,parts,module_names)

[DISABLE]
opcode_inj.disable(script_ref)
opcode_inj[script_ref]=nil
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>695</ID>
          <Description>"Cutscene heights fix"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
if syntaxcheck then return end
local vars={}
--OPTIONAL (Add as named element of 'vars' table to use in '$%s{...}' notation)
local suffix='_chg'
local parts={{'.+',1,'x_reg'}}
local module_names='PES2021.exe'

vars.post={}

vars.post[1]=function() --gives names "xmm~1" to "xmm~15" to all registers that are not 'x_reg'
 local lki=vars['lookaheads']['instructions']
 local c=0
 for i=2, #lki do
     local li=lki[i]
     local m=string.match(li,'^%s*movss%s+.+%s*,%[%s*([^%]]+)%s*%]')
     if m~=nil then
        c=c+1
        if c==2 then
           vars['defH']=m
           break
        end
     end
 end
 return vars --IMPORTANT!
end


--COMPULSORY
local newmem_name='newmem'..suffix
local newmem_size='$1000'
local script_ref='Cutscenes_height' --  opcode_inj[vars.script_ref] stores vars
local inj_name='INJECT'..suffix
local pattern='^%s*movss%s+.+%s*,%[%s*[^%]]+%s*%]'
local aobs={'0F 2F C5 72 05 0F 28 D1 EB 03',-15,-13}
local lookahead_n=50

local inj_script=[[
  define(${inj_name},${address_string})
  registersymbol(${inj_name})
  alloc(${newmem_name}, ${newmem_size}, ${inj_name})

  label(code)
  label(return)

${newmem_name}:
	code:
    ${og_instruction}
    divss ${x_reg},[${defH}]
mulss ${x_reg},xmm1
      ${overwritten}
	  jmp return

 ${inj_name}:
	  jmp ${newmem_name}
  ${post_jmp}
  return:
]]

[ENABLE]
opcode_inj.inject(script_ref,inj_name,newmem_name,newmem_size,vars,inj_script,pattern,aobs,lookahead_n,parts,module_names)

[DISABLE]
opcode_inj.disable(script_ref)
opcode_inj[script_ref]=nil
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>698</ID>
          <Description>"Game speed (Lower is faster [1/x])"</Description>
          <Options moHideChildren="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
if syntaxcheck then return end
local vars={}
--OPTIONAL (Add as named element of 'vars' table to use in '$%s{...}' notation)
local suffix='_speed'
vars.varis_1_n='mult'..suffix

local spd=1
vars.varis_1_d='dd (float)'..spd
vars.varis_1_size=4
local parts={{'xmm%d+',1,'x_reg'}}
local module_names='PES2021.exe'

--COMPULSORY
local newmem_name='newmem'..suffix
local newmem_size='$1000'
local script_ref='Game_speed' --  opcode_inj[vars.script_ref] stores vars
local inj_name='INJECT'..suffix
local pattern='^%s*movss%s+xmm%d+%s*,%s*%[[^%]]+%]'
local aobs={'44 88 49 10 44 89 41 14 89 51 18',-127,-123}
local lookahead_n=32

local inj_script=[[
	define($%s{inj_name},$%s{address_string})
    registersymbol($%s{inj_name})
    alloc($%s{newmem_name}, $%s{newmem_size}, $%s{inj_name})
	alloc($%s{varis_1_n}, $%d{varis_1_size}, $%s{inj_name})
    registersymbol($%s{varis_1_n})
	$%s{varis_1_n}:
	$%s{varis_1_d}

	label(code)
	label(return)

	$%s{newmem_name}:
	code:
    ${og_instruction}
	  mulss ${x_reg},[${varis_1_n}]
      ${overwritten}
	  jmp return

	${inj_name}:
	  jmp ${newmem_name}
	  ${post_jmp}
	return:
]]

[ENABLE]
opcode_inj.inject(script_ref,inj_name,newmem_name,newmem_size,vars,inj_script,pattern,aobs,lookahead_n,parts,module_names)

[DISABLE]
opcode_inj.disable(script_ref)
opcode_inj[script_ref]=nil
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>699</ID>
              <Description>"Speed"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>mult_speed</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>700</ID>
          <Description>"Height mod ("Height mult" lower is taller)"</Description>
          <Options moHideChildren="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

aobscanmodule(INJECT_hm,PES2021.exe,0F 2F E2 76 18 F3 0F 5C CB F3 0F 5E 0D) // should be unique
alloc(newmem,$1000,INJECT_hm)

label(code)
label(return)

aobscanmodule(INJECT_hm2,PES2021.exe,F3 0F 10 4A 28 F3 0F 11 04 24 F3 0F 10 42 24 F3 0F 11 44 24 08) // should be unique
alloc(newmem2,$1000,INJECT_hm2)

label(code2)
label(return2)

alloc(hgt_mult, 4, INJECT_hm)
registersymbol(hgt_mult)
hgt_mult:
dd (float)1.063

alloc(inv_hgt_mult, 4, INJECT_hm2)
registersymbol(inv_hgt_mult)
inv_hgt_mult:
db C8 41 79 3F
//dd (float)

newmem:

code:
  comiss xmm4,xmm2
  mulss xmm4, [hgt_mult]
  jmp return

INJECT_hm:
  jmp newmem
return:
  db EB 16
  nop 2
registersymbol(INJECT_hm)

newmem2:

code2:
  movss xmm1,[rdx+28]
    mulss xmm1,[inv_hgt_mult]
  jmp return2

INJECT_hm2:
  jmp newmem2
return2:
registersymbol(INJECT_hm2)

[DISABLE]

INJECT_hm:
  db 0F 2F E2 76 18 F3 0F 5C CB F3 0F 5E 0D

unregistersymbol(INJECT_hm)
dealloc(newmem)

INJECT_hm2:
  db F3 0F 10 4A 28 F3 0F 11 04 24 F3 0F 10 42 24 F3 0F 11 44 24 08

unregistersymbol(INJECT_hm2)
dealloc(newmem2)

</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>701</ID>
              <Description>"Height mult"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>hgt_mult</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>708</ID>
              <Description>"Animation y mult"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>inv_hgt_mult</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>709</ID>
          <Description>"Body size"</Description>
          <Options moHideChildren="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
if syntaxcheck then return end
local vars={}
--OPTIONAL (Add as named element of 'vars' table to use in '$%s{...}' notation)
local suffix='_wgt'
vars.varis_1_n='mult'..suffix
local wmult=1
vars.varis_1_d='dd (float)'..wmult
vars.varis_1_size=4
local parts={{'xmm%d+',1,'x_reg'}}
local module_names='PES2021.exe'

--COMPULSORY
local newmem_name='newmem'..suffix
local newmem_size='$1000'
local script_ref='Weights_mod' --  opcode_inj[vars.script_ref] stores vars
local inj_name='INJECT'..suffix
local pattern='^%s*movss%s*xmm%d+%s*,%s*%[[^%]]+%]'
local aobs={'F3 0F 10 89 14 01 00 00 0F 28 C1 F3 0F 5C C2 0F 2F C3 73 03 0F 28 CA',22,24}
local lookahead_n=32

local inj_script=[[
  define(${inj_name},${address_string})
  registersymbol(${inj_name})
  alloc(${newmem_name}, ${newmem_size}, ${inj_name})
	alloc($%s{varis_1_n}, $%d{varis_1_size}, $%s{inj_name})
    registersymbol($%s{varis_1_n})
	$%s{varis_1_n}:
	$%s{varis_1_d}
  label(code)
  label(return)

${newmem_name}:
	code:
    ${og_instruction}
    mulss ${x_reg},[${varis_1_n}]
	  jmp return

 ${inj_name}:
	  jmp ${newmem_name}
${post_jmp}
  return:

]]

[ENABLE]
opcode_inj.inject(script_ref,inj_name,newmem_name,newmem_size,vars,inj_script,pattern,aobs,lookahead_n,parts,module_names)

[DISABLE]
opcode_inj.disable(script_ref)
opcode_inj[script_ref]=nil
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>710</ID>
              <Description>"Size mult"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>mult_wgt</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>715</ID>
          <Description>"Camera mod"</Description>
          <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

[DISABLE]
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>720</ID>
              <Description>"Variables"</Description>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>718</ID>
                  <Description>"Zoom"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>cam_zoom</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>716</ID>
                  <Description>"Height"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>cam_hgt</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>717</ID>
                  <Description>"Z"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>cam_z</Address>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>719</ID>
              <Description>"Scripts"</Description>
              <Options moAlwaysHideChildren="1" moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>711</ID>
                  <Description>"NOPs"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
if syntaxcheck then return end
local vars={}
--OPTIONAL (Add as named element of 'vars' table to use in '$%s{...}' notation)
local suffix='_camMod'

local module_names='PES2021.exe'
local parts={{'xmm%d',1,'xreg'}}
vars.post={}

vars.post[1]=function() --get instruction sizes
 local zk=vars['lookaheads']
 local z=zk['offsets']
 local zl=#z
 local t={nil}
 for i=2,zl-1 do --skip instruction
     local c=z[i]
     local cn=z[i+1]
     table.insert(t,cn-c)
 end
 vars['opc_sizes']=t
 return vars --IMPORTANT!
end

-- token functions (below) run after ['post'] functions
vars['nop_if']=function()
 local z=vars['opc_sizes']
 local pc=vars['lookaheads']['instructions']
 local pz=#pc
   local ptrn=vars['xreg']..'%s*,'
   local out={}

 for i=2, pz-1 do
   local ps=z[i]
   local p=pc[i]

   if string.find(p,ptrn)~=nil then
      local t={}
      for j=1,ps do
          table.insert(t,'nop')
      end
      table.insert(out,table.concat(t,'\n'))
   else
       table.insert(out,p)
   end
 end
local jmpa=vars['address_dec']+vars['lookaheads']['offsets'][pz]
 return table.concat(out,'\n')..'\njmp '..string.format('%X',jmpa)


end


--COMPULSORY
local newmem_name='newmem'..suffix
local newmem_size='$1000'
local script_ref='Camera_mod' --  opcode_inj[vars.script_ref] stores vars
local inj_name='INJECT'..suffix
local pattern='^%s*divss%s+xmm%d%s*,%s*%[%s*[^%+]+%s*%+%s*%d+%s*%]'
local aobs={'F3 0F 5E 55 78 0F 28 C1 F3 0F 59 CC',0,1}
local lookahead_n=100

local inj_script=[[
	define(${inj_name},${address_string})
    registersymbol(${inj_name})
    alloc(${newmem_name}, ${newmem_size}, ${inj_name})

	label(code)
	//label(return)

    ${newmem_name}:
	code:
    ${og_instruction}
    ${nop_if}()


 ${inj_name}:
	  jmp ${newmem_name}
]]

local vars2={}
local script_ref2='Camera_mod2' --  opcode_inj[vars.script_ref] stores vars
local inj_name2='INJECT'..suffix..'2'
local pattern2='^%s*subss%s+xmm%d%s*,%s*xmm%d'
local aobs2={'F3 0F 5C C3 F3 41 0F 5E CA',0,1}


[ENABLE]

opcode_inj.inject(script_ref,inj_name,newmem_name,newmem_size,vars,inj_script,pattern,aobs,lookahead_n,parts,module_names)
opcode_inj.nop(script_ref2,inj_name2,vars2,pattern2,aobs2,module_names)


[DISABLE]

opcode_inj.disable(script_ref)
opcode_inj[script_ref]=nil

opcode_inj.disable_nop(script_ref2)
opcode_inj[script_ref2]=nil

</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>714</ID>
                  <Description>"Height, z, zoom"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
        aobscanmodule(INJECT_camMod5,PES2021.exe,F3 44 0F 11 4D 87 44) // should be unique
        alloc(cam_z, 8, INJECT_camMod5)
        registersymbol(cam_z)
cam_z:
dd (float)-5 //CHANGE THIS ONE!
dd (float)0.01

         aobscanmodule(INJECT_camMod3,PES2021.exe,F3 41 0F 11 45 10 F3 0F 59 D4) // should be unique
         alloc(cam_hgt, 4, INJECT_camMod3)
         registersymbol(cam_hgt)
cam_hgt:
dd (float)1.56 //CHANGE THIS ONE!

        aobscanmodule(INJECT_camMod4,PES2021.exe,F3 0F 11 46 30 E8 0D 00 00 00) // should be unique
          alloc(cam_zoom, 4, INJECT_camMod4)
          registersymbol(cam_zoom)
cam_zoom:
dd (float)1.25 //CHANGE THIS ONE!

alloc(newmem5,$1000,INJECT_camMod5)

label(code5)
label(return5)

newmem5:

code5:
mulss xmm9,[cam_z]
mulss xmm9,[cam_z+4]
  movss [rbp-79],xmm9
  jmp return5

INJECT_camMod5:
  jmp newmem5
  nop
return5:
registersymbol(INJECT_camMod5)

alloc(newmem3,$1000,INJECT_camMod3)

label(code3)
label(return3)

newmem3:

code3:
  mulss xmm0,[cam_hgt]
  movss [r13+10],xmm0
  jmp return3

INJECT_camMod3:
  jmp newmem3
  nop
return3:
registersymbol(INJECT_camMod3)


alloc(newmem4,$1000,INJECT_camMod4)
label(code4)
label(return4)


newmem4:

code4:
      mulss xmm0,[cam_zoom]
  movss [rsi+30],xmm0
  jmp return4

INJECT_camMod4:
  jmp newmem4
return4:
registersymbol(INJECT_camMod4)

[DISABLE]

INJECT_camMod3:
  db F3 41 0F 11 45 10

unregistersymbol(INJECT_camMod3)
dealloc(newmem3)

INJECT_camMod5:
  db F3 44 0F 11 4D 87

unregistersymbol(INJECT_camMod5)
dealloc(newmem5)

INJECT_camMod4:
  db F3 0F 11 46 30 E8 0D 00 00 00

unregistersymbol(INJECT_camMod4)
dealloc(newmem4)

</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>725</ID>
          <Description>"Fix difficulty experiment"</Description>
          <Options moHideChildren="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
if syntaxcheck then return end

--Credit to Twiggy for his work on this, which helped me make this mod

local vars={}
--OPTIONAL (Add as named element of 'vars' table to use in '$%s{...}' notation)
local suffix='_diffMod'

vars.varis_1_n='set_diff'..suffix
local set_diff=7 --between 0 and 7
vars.varis_1_d='dd '..set_diff
vars.varis_1_size=4

local module_names='PES2021.exe'
local parts={}

--COMPULSORY
local newmem_name='newmem'..suffix
local newmem_size='$1000'
local script_ref='Difficulty_mod' --  opcode_inj[vars.script_ref] stores vars
local inj_name='INJECT'..suffix
local pattern='^%s*test%s+ecx%s*,%s*ecx'
local aobs={'0F 48 C8 49 8B C0',10,11}
local lookahead_n=20

local inj_script=[[
	define(${inj_name},${address_string})
    registersymbol(${inj_name})
    alloc(${newmem_name}, ${newmem_size}, ${inj_name})

    alloc(${varis_1_n}, $%d{varis_1_size}, ${inj_name})
  registersymbol(${varis_1_n})
  ${varis_1_n}:
  ${varis_1_d}

	label(code)
	label(return)

    ${newmem_name}:
	code:
    mov ecx,[${varis_1_n}]
    ${og_instruction}
    ${overwritten}
    jmp return

 ${inj_name}:
	  jmp ${newmem_name}
          ${post_jmp}
          return:

]]

[ENABLE]

opcode_inj.inject(script_ref,inj_name,newmem_name,newmem_size,vars,inj_script,pattern,aobs,lookahead_n,parts,module_names)

[DISABLE]

opcode_inj.disable(script_ref)
opcode_inj[script_ref]=nil
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>726</ID>
              <Description>"Set difficulty level [0-7; 5 (Superstar)]"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>4 Bytes</VariableType>
              <Address>set_diff_diffMod</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>727</ID>
          <Description>"Additional time"</Description>
          <Options moHideChildren="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
if syntaxcheck then return end

local vars={}
--OPTIONAL (Add as named element of 'vars' table to use in '$%s{...}' notation)
local suffix='_additionalTimeMod'

vars.varis_1_n='set_diff'..suffix
local mult=18
vars.varis_1_d='dd (float)'..mult
vars.varis_1_size=4

local module_names='PES2021.exe'
local parts={{'xmm%d+',1,'x_reg'}}

--COMPULSORY
local newmem_name='newmem'..suffix
local newmem_size='$1000'
local script_ref='additionalTime_mod' --  opcode_inj[vars.script_ref] stores vars
local inj_name='INJECT'..suffix
local pattern='^%s*divss%s+xmm%d+%s*,%s*xmm%d+'
local aobs={'F3 0F 5E F0 48 8B CE 0F',0,1}
local lookahead_n=25

local inj_script=[[
	define(${inj_name},${address_string})
    registersymbol(${inj_name})
    alloc(${newmem_name}, ${newmem_size}, ${inj_name})

    alloc(${varis_1_n}, $%d{varis_1_size}, ${inj_name})
  registersymbol(${varis_1_n})
  ${varis_1_n}:
  ${varis_1_d}

	label(code)
	label(return)

    ${newmem_name}:
	code:
    ${og_instruction}
    mulss ${x_reg},[${varis_1_n}]
    ${overwritten}
    jmp return

 ${inj_name}:
	  jmp ${newmem_name}
          ${post_jmp}
          return:

]]


local vars2={}
--OPTIONAL (Add as named element of 'vars' table to use in '$%s{...}' notation)
local suffix2='_additionalTimeMod2'

local parts2={{'.+',1,'addr'}}

--COMPULSORY
local newmem_name2='newmem'..suffix2
local newmem_size2='$1000'
local script_ref2='additionalTime_mod2' --  opcode_inj[vars.script_ref] stores vars
local inj_name2='INJECT'..suffix2
local pattern2='^%s*jna%s+.+'
local aobs2={'B0 01 48 83 C4 28 C3 CC CC F3 0F 10 01',20,22}
local lookahead_n2=25

local inj_script2=[[
	define(${inj_name},${address_string})
    registersymbol(${inj_name})
    alloc(${newmem_name}, ${newmem_size}, ${inj_name})

	label(code)
	label(return)

    ${newmem_name}:
	code:
    //${og_instruction}
    jmp ${addr}
    ${overwritten}
    jmp return

 ${inj_name}:
	  jmp ${newmem_name}
          ${post_jmp}
          return:

]]

[ENABLE]

opcode_inj.inject(script_ref2,inj_name2,newmem_name2,newmem_size2,vars2,inj_script2,pattern2,aobs2,lookahead_n2,parts2,module_names)
opcode_inj.inject(script_ref,inj_name,newmem_name,newmem_size,vars,inj_script,pattern,aobs,lookahead_n,parts,module_names)

[DISABLE]

opcode_inj.disable(script_ref)
opcode_inj[script_ref]=nil

opcode_inj.disable(script_ref2)
opcode_inj[script_ref2]=nil
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>728</ID>
              <Description>"Additional time multiplier"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>set_diff_additionalTimeMod</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>751</ID>
          <Description>"New broadcast camera"</Description>
          <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]

[DISABLE]
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>752</ID>
              <Description>"Variables"</Description>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>743</ID>
                  <Description>"Zoom"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>mults_nbcc+4</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>744</ID>
                  <Description>"Height"</Description>
                  <ShowAsSigned>0</ShowAsSigned>
                  <VariableType>Float</VariableType>
                  <Address>mults_nbcc+8</Address>
                </CheatEntry>
                <CheatEntry>
                  <ID>757</ID>
                  <Description>"Extra"</Description>
                  <Options moManualExpandCollapse="1" moAllowManualCollapseAndExpand="1"/>
                  <GroupHeader>1</GroupHeader>
                  <CheatEntries>
                    <CheatEntry>
                      <ID>740</ID>
                      <Description>"Pan?"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>mults_nbcc</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>750</ID>
                      <Description>"Tilt down/up (+/-)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>mults_nbcc+C</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>746</ID>
                      <Description>"Zoom 2 (Draw distances)"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>mults_nbcc+10</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>745</ID>
                      <Description>"Co-ordinate shift"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>mults_nbcc+14</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>748</ID>
                      <Description>"Pos along halfway line"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>mults_nbcc+18</Address>
                    </CheatEntry>
                    <CheatEntry>
                      <ID>749</ID>
                      <Description>"Angle multiplier"</Description>
                      <ShowAsSigned>0</ShowAsSigned>
                      <VariableType>Float</VariableType>
                      <Address>mults_nbcc+1C</Address>
                    </CheatEntry>
                  </CheatEntries>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>756</ID>
              <Description>"Scripts"</Description>
              <Options moAlwaysHideChildren="1" moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>735</ID>
                  <Description>"NOP"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
if syntaxcheck then return end
local vars={}
--OPTIONAL (Add as named element of 'vars' table to use in '$%s{...}' notation)
local suffix='_camMod'

local module_names='PES2021.exe'
local parts={{'xmm%d',1,'xreg'}}
vars.post={}

vars.post[1]=function() --get instruction sizes
 local zk=vars['lookaheads']
 local z=zk['offsets']
 local zl=#z
 local t={nil}
 for i=2,zl-1 do --skip instruction
     local c=z[i]
     local cn=z[i+1]
     table.insert(t,cn-c)
 end
 vars['opc_sizes']=t
 return vars --IMPORTANT!
end

-- token functions (below) run after ['post'] functions
vars['nop_if']=function()
 local z=vars['opc_sizes']
 local pc=vars['lookaheads']['instructions']
 local pz=#pc
   local ptrn=vars['xreg']..'%s*,'
   local out={}

 for i=2, pz-1 do
   local ps=z[i]
   local p=pc[i]

   if string.find(p,ptrn)~=nil then
      local t={}
      for j=1,ps do
          table.insert(t,'nop')
      end
      table.insert(out,table.concat(t,'\n'))
   else
       table.insert(out,p)
   end
 end
local jmpa=vars['address_dec']+vars['lookaheads']['offsets'][pz]
 return table.concat(out,'\n')..'\njmp '..string.format('%X',jmpa)


end


--COMPULSORY
local newmem_name='newmem'..suffix
local newmem_size='$1000'
local script_ref='Camera_mod' --  opcode_inj[vars.script_ref] stores vars
local inj_name='INJECT'..suffix
local pattern='^%s*divss%s+xmm%d%s*,%s*%[%s*[^%+]+%s*%+%s*%d+%s*%]'
local aobs={'F3 0F 5E 55 78 0F 28 C1 F3 0F 59 CC',0,1}
local lookahead_n=100

local inj_script=[[
	define(${inj_name},${address_string})
    registersymbol(${inj_name})
    alloc(${newmem_name}, ${newmem_size}, ${inj_name})

	label(code)
	//label(return)

    ${newmem_name}:
	code:
    ${og_instruction}
    ${nop_if}()


 ${inj_name}:
	  jmp ${newmem_name}
]]


[ENABLE]

opcode_inj.inject(script_ref,inj_name,newmem_name,newmem_size,vars,inj_script,pattern,aobs,lookahead_n,parts,module_names)

[DISABLE]

opcode_inj.disable(script_ref)
opcode_inj[script_ref]=nil
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>739</ID>
                  <Description>"Multipliers"</Description>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>{$lua}
if syntaxcheck then return end
local vars={}
local suffix='_nbcc'

local module_names='PES2021.exe'
local parts={{'xmm%d+',1,'xreg'}}

local v12=1 -- zoom
local v13=1 -- height

--EXTRA
local v11=1 -- pan?
local v14=-1.95 -- tilt down/up
local v21=1 -- zoom2
local v22=1 -- co-ordinate shift
local v23=5 -- pos along halfway line
local v24=1.4 -- angle mult

vars.varis_1_n='mults'..suffix
vars.varis_1_d='dd (float)'..v11..'\ndd (float)'..v12..'\ndd (float)'..v13..'\ndd (float)'..v14..'\ndd (float)'..v21..'\ndd (float)'..v22..'\ndd (float)'..v23..'\ndd (float)'..v24
vars.varis_1_size=32


vars.post={}

vars.post[1]=function() --get instruction sizes
 local zk=vars['lookaheads']
 local z=zk['offsets']
 local zl=#z
 local t={nil}
 for i=2,zl-1 do --skip instruction
     local c=z[i]
     local cn=z[i+1]
     table.insert(t,cn-c)
 end
 vars['opc_sizes']=t
 return vars --IMPORTANT!
end

-- token functions (below) run after ['post'] functions

vars['get_rest']=function()
 local z=vars['opc_sizes']
 local pc=vars['lookaheads']['instructions']
 local pz=#pc
   local ptrn='^%s*movups%s+xmm%d+%s*,%s*%[[^%]]+%]'
   local out={}

 for i=2, pz-1 do
   local ps=z[i]
   local p=pc[i]

   if string.find(p,ptrn)~=nil then
		local xr=string.match(p,'xmm%d+')
		table.insert(out,p)
		table.insert(out,string.format('mulps %s,[%s+10]',xr,vars.varis_1_n))
   else
       table.insert(out,p)
   end
 end
local jmpa=vars['address_dec']+vars['lookaheads']['offsets'][pz]
 return table.concat(out,'\n')..'\njmp '..string.format('%X',jmpa)


end

--COMPULSORY
local newmem_name='newmem'..suffix
local newmem_size='$1000'
local script_ref='new_bcc' --  opcode_inj[vars.script_ref] stores vars
local inj_name='INJECT'..suffix
local pattern='^%s*movups%s+xmm%d+%s*,%s*%[[^%]]+%]'
local aobs={'0F 11 44 24 20 89 45 87 0F 11 4C 24 30',23,24}
local lookahead_n=25

local inj_script=[[
	define(${inj_name},${address_string})
    registersymbol(${inj_name})
    alloc(${newmem_name}, ${newmem_size}, ${inj_name})

      alloc(${varis_1_n}, $%d{varis_1_size}, ${inj_name})
  registersymbol(${varis_1_n})
  ${varis_1_n}:
  ${varis_1_d}

	label(code)
	label(return)

    ${newmem_name}:
	code:
    ${og_instruction}
    mulps ${xreg},[${varis_1_n}]
    ${get_rest}()

 ${inj_name}:
	  jmp ${newmem_name}
      ${post_jmp}
      return:
]]

[ENABLE]

opcode_inj.inject(script_ref,inj_name,newmem_name,newmem_size,vars,inj_script,pattern,aobs,lookahead_n,parts,module_names)

[DISABLE]

opcode_inj.disable(script_ref)
opcode_inj[script_ref]=nil
</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>889</ID>
          <Description>"Twist right, left arm (-ve mean)"</Description>
          <Options moHideChildren="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
if syntaxcheck then return end
local vars={}
--OPTIONAL (Add as named element of 'vars' table to use in '$%s{...}' notation)
local suffix='_twrla'
vars.varis_1_n='mult'..suffix

local m1=1 -- Twist (right) / Left arm mean
local r1=0 -- Twist (right) / Left arm range

vars.varis_1_d='dd (float)'..m1..'\ndd (float)'..r1
vars.varis_1_size=8   --(u +0, r +4)

local parts={{'[^%]]+',1,'localAddress'},{'%d+',1,'xreg_n'},{'xmm%d+',1,'x_reg'},{'mov.+',1,'mov_op'}}
local module_names='PES2021.exe'
vars.post={}

vars.post[1]=function() --gives names "xmm~1" to "xmm~15" to all registers that are not 'x_reg'
 local xn=tonumber(vars.xreg_n)
 local c=1
 for i=0,15 do
  if xn~=i then
   vars['xmm~'..c]='xmm'..i
   c=c+1
  end
 end
 return vars --IMPORTANT!
end

-- token functions (below) run after ['post'] functions
vars['push_xmm']=function(n) -- n, as all arguments used for token functions, is necessarily a string!
    local s='sub rsp,10\nmovdqu [rsp], '
    if n=='0' then
		return s .. vars['x_reg']
	else
		return s .. vars['xmm~'..n]
	end
end

vars['pop_xmm']=function(n) -- n, as all arguments used for token functions, is necessarily a string!
    local s=',[rsp]\nadd rsp,10'
    if n=='0' then
		return 'movdqu '..vars['x_reg'] .. s
	else
		return 'movdqu '..vars['xmm~'..n] .. s
	end
end

vars['stack_push']=function(n) -- n, as all arguments used for token functions, is necessarily a string!
		return 'sub rsp, ' .. n
end

vars['stack_pop']=function(n) -- n, as all arguments used for token functions, is necessarily a string!
		return 'add rsp, ' .. n
end

--COMPULSORY
local newmem_name='newmem'..suffix
local newmem_size='$1000'
local script_ref='Twist_right_left_arm' --  opcode_inj[vars.script_ref] stores vars
local inj_name='INJECT'..suffix
local pattern='^%s*mov.+%s*xmm%d+,%s*%[[^%]]+%]'
local aobs={'0F 28 F0 0F 56 F1 41 F6 C2 02 74 29',12,13}
local lookahead_n=32

local inj_script=[[
	  define(${inj_name},${address_string})
  registersymbol(${inj_name})
  alloc(${newmem_name}, ${newmem_size}, ${inj_name})

  alloc(${varis_1_n}, $%d{varis_1_size}, ${inj_name})
  registersymbol(${varis_1_n})
  ${varis_1_n}:
  ${varis_1_d}

  label(code)
  label(return)

  ${newmem_name}:
  code:
    push rcx
    push rbx
    push rax

    mov rax,[7FFE0014] //Windows internal clock
    mov rbx,rax
    shl rbx,6
    mov rcx,rax
    shl rcx,18
    imul rcx,rbx
    imul rcx,rax
    shr rcx,20 //ecx has the number
 ${push_xmm}(1)
    ${push_xmm}(2)
    ${push_xmm}(3)
    ${push_xmm}(4)
    ${push_xmm}(5)
    ${push_xmm}(0)

    cvtsi2ss ${x_reg}, rcx
    cvtss2sd ${x_reg}, ${x_reg}

    ${stack_push}(8)
        mov [rsp],FFE00000
        mov [rsp+4],41EFFFFF //move max_float into stack
        divsd ${x_reg}, [rsp] //div by max float (in double precision)
    ${stack_pop}(8)

    cvtsd2ss ${x_reg}, ${x_reg} //random float in ${x_reg}

    cvtss2si ecx, ${x_reg}  //b as int
    cvtsi2ss  ${xmm~5}, ecx // b

    ${stack_push}(20)
        mov [rsp], C0000000 //-2
        mov [rsp+4], 3F800000 //1
        mov [rsp+8], 40000000 //2
        mov [rsp+C], 3F3504F3 //sqHalf

        movss ${xmm~1},  [rsp+C] //sqHalf
        movss ${xmm~2}, [rsp] //-2
        movss ${xmm~3}, [rsp+4] //1
        movss ${xmm~4}, [rsp+8] //2

        mulss ${xmm~4}, ${xmm~5} //x~4=b*2
        subss ${xmm~3}, ${xmm~4} // x~3=1-b*2
        mulss ${xmm~1}, ${xmm~3} // x~1 = ( sqHalf* (1-b*2) )
        mulss ${xmm~2}, ${xmm~5} //x~2 = -2*b
        mulss ${xmm~2}, ${x_reg} // x~2=(-2*b)*x
        addss ${xmm~2}, ${xmm~5}//x~2=(-2*b*x)+b
        addss ${xmm~2}, ${x_reg} // x~2=(-2*b*x)+b+x
        sqrtss ${xmm~2}, ${xmm~2} // // x~2=sqrt(-2*b*x+b+x)
        mulss  ${xmm~1},${xmm~2} // x~1 = ( sqHalf* (1-b*2) )*sqrt(-2*b*x+b+x)
        addss ${xmm~1}, ${xmm~5} //  x~1 = b+ ( sqHalf* (1-b*2) )*sqrt(-2*b*x+b+x) || FINAL!

        mov [rsp+10], 3F800000 //1
        mov [rsp+14], 3F800000 //1
        mov [rsp+18], 3F800000 //1
        mov [rsp+1C], 3F800000 //1

        movups ${xmm~4}, [rsp+10] //x~4={1,1,1,1}
    ${stack_pop}(20)

    mulss  ${xmm~4},  [${varis_1_n}+4] //{r,1,1,1}
    movss  ${xmm~3},  [${varis_1_n}] //u
    subss  ${xmm~3},  ${xmm~4}
    mulss  ${xmm~4},  ${xmm~1} //mul by adj_x
    addss  ${xmm~4},  ${xmm~4}
    addss  ${xmm~4},  ${xmm~3} //FINAL MULT in x~4 !

    ${pop_xmm}(0)
	${og_instruction}  //loads 4 x floats into $%s{x_reg}

  ${stack_push}(10)
    pslldq ${xmm~4},4 //(~,r,1,1)
     movdqu [rsp], ${xmm~4}
     mov [rsp], 3F800000 //1
     movups ${xmm~4}, [rsp] ////(1,r,1,1)
	mulps ${x_reg},${xmm~4}
  ${stack_pop}(10)

    ${pop_xmm}(5)
    ${pop_xmm}(4)
    ${pop_xmm}(3)
    ${pop_xmm}(2)
    ${pop_xmm}(1)
    pop rax
    pop rbx
    pop rcx
      ${overwritten}
	  jmp return

	$%s{inj_name}:
	  jmp ${newmem_name}
	  ${post_jmp}
	return:
]]

[ENABLE]
opcode_inj.inject(script_ref,inj_name,newmem_name,newmem_size,vars,inj_script,pattern,aobs,lookahead_n,parts,module_names)

[DISABLE]
opcode_inj.disable(script_ref)
opcode_inj[script_ref]=nil
</AssemblerScript>
          <CheatEntries>
            <CheatEntry>
              <ID>872</ID>
              <Description>"Mean"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>mult_twrla</Address>
            </CheatEntry>
            <CheatEntry>
              <ID>876</ID>
              <Description>"Range"</Description>
              <ShowAsSigned>0</ShowAsSigned>
              <VariableType>Float</VariableType>
              <Address>mult_twrla+4</Address>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>1112</ID>
          <Description>"Physical dribble experiment"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}
if syntaxcheck then return end
local vars={}
local suffix='_drbPhys'
--OPTIONAL (Add as named element of 'vars' table to use in '$%s{...}' notation)
local parts={}

vars['get_rem']=function()
 local lk=vars['lookaheads']
 local z=lk['sizes']
 local pc=lk['instructions']
 local f=lk['offsets']

 local pz=#pc
 local ptrn={'^%s*ja%s+%x+','^%s*or%s+byte ptr%s+%[[^%]]+%]%s*,%s*.+'}

 local out={}
 for i=1, pz-1 do
     local ps=z[i]
     local p=pc[i]
     if string.find(p,ptrn[2])~=nil then -- if or
       table.insert(out,p)
       local ofsx=string.format('%X',(vars['address_dec']+f[i+2]))
       table.insert(out,'mov al,00\njmp '..ofsx)
       break
     else
         table.insert(out,p)
     end
 end
 return table.concat(out,'\n')
end

--COMPULSORY
local newmem_name='newmem'..suffix
local newmem_size='$1000'
local script_ref='phsycical_dribble_mod' --  opcode_inj[vars.script_ref] stores vars
local inj_name='INJECT'..suffix
local pattern='^%s*ja%s+%x+'
local aobs={'77 25 89 8F 74 0E 00 00',0,0}
local lookahead_n=30

local inj_script=[[
	define(${inj_name},${address_string})
    registersymbol(${inj_name})
    alloc(${newmem_name}, ${newmem_size}, ${inj_name})

	label(code)
	//label(return)

    ${newmem_name}:
	code:
    ${get_rem}()

 ${inj_name}:
	  jmp ${newmem_name}
      ${post_jmp}
]]

[ENABLE]
opcode_inj.inject(script_ref,inj_name,newmem_name,newmem_size,vars,inj_script,pattern,aobs,lookahead_n,parts,module_names)

[DISABLE]
opcode_inj.disable(script_ref)
opcode_inj[script_ref]=nil
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
</CheatTable>