<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="45">
  <CheatEntries>
    <CheatEntry>
      <ID>823</ID>
      <Description>"Attempt"</Description>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>6</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>
[ENABLE]

aobscanmodule(INJECT,PES2021.exe,72 1D 0F 2F E2) // should be unique
alloc(newmem,$1000,INJECT)

label(code)
label(return)

alloc(mult_1, 16, INJECT)
registersymbol(mult_1)
mult_1:
dd (float)0.1
dd (float)1
dd (float)1
dd (float)1

newmem:

code:
  //jb PES2021.exe.trace+195B509
  //comiss xmm4,xmm2
  divss xmm1,[rcx]
  mulss xmm1,[mult_1]
movaps xmm0,xmm1
ret

  jmp return

INJECT:
  jmp newmem
return:
registersymbol(INJECT)

[DISABLE]

INJECT:
  db 72 1D 0F 2F E2

unregistersymbol(INJECT)
dealloc(newmem)
unregistersymbol(mult_1)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>822</ID>
          <Description>"Cutscenes height fix attempt"</Description>
          <Options moHideChildren="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}

[ENABLE]

local aobs=AOBScan('74 0C FF C1 48 83 C0 30 3B CA', "", 0)
if aobs~=nil and aobs.Count>0 then
local aob_count=aobs.Count
	for i=0,aob_count-1 do
        if i==0 then
		local res=tonumber(aobs[i],16)
		writeBytes(res,0xEB)
		registerSymbol('j_chg_CSH_j1_'..i,res)
        end
	end
end
aobs.destroy()

local aobs=AOBScan('76 12 F3 0F 10 0B F3 0F 58 D6 0F C6 C9 00', "", 0)
if aobs~=nil and aobs.Count>0 then
local aob_count=aobs.Count
	for i=0,aob_count-1 do
        if i>=1 then
		local res=tonumber(aobs[i],16)
		writeBytes(res,0x90,0x90)
		registerSymbol('j_chg_CSH_j2_'..i,res)
        end
	end
end
aobs.destroy()

--CANNOT BE DISABLED ONCE ENABLED; COMMENT OUT TO ALLOW DYNAMIC CHECKING OF THE TWO ABOVE!
local aobs=AOBScan('F3 0F 5C C3 0F 2F C5 72 05 0F 28 D1 EB 03 0F 28 D3', "", 0)
if aobs~=nil and aobs.Count>0 then
local aob_count=aobs.Count
	for i=0, aob_count-1 do
		local res=tonumber(aobs[i],16)
        writeBytes(res+7,0x90,0x90,0x90,0x90,0x90)
		writeBytes(res+25,0xF3,0x0F,0x10,0xE1,0x90,0x90,0x90,0x90)
		registerSymbol('j_chg_CSH_j3_'..i,res)
	end
end
aobs.destroy()


[DISABLE]
local function unreg()
  local c=0
  while true do
      local sn='j_chg_CSH_j1_'..c
	  local sa=getAddress(sn)
	  if sa~=nil then
		  writeBytes(sa,0x74)
		  unregisterSymbol(sn)
		  c=c+1
	  else
		  break
	  end
  end
end

local b, r = pcall(unreg)

local function unreg2()
  local c=0
  while true do
      local sn='j_chg_CSH_j2_'..c
	  local sa=getAddress(sn)
	  if sa~=nil then
		  writeBytes(sa,0x76,0x12)
		  unregisterSymbol(sn)
		  c=c+1
	  else
		  break
	  end
  end
end

b, r = pcall(unreg2)
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
</CheatTable><?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="45">
  <CheatEntries>
    <CheatEntry>
      <ID>823</ID>
      <Description>"Attempt"</Description>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>6</ID>
          <Description>"Auto Assemble script"</Description>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>
[ENABLE]

aobscanmodule(INJECT,PES2021.exe,72 1D 0F 2F E2) // should be unique
alloc(newmem,$1000,INJECT)

label(code)
label(return)

alloc(mult_1, 16, INJECT)
registersymbol(mult_1)
mult_1:
dd (float)0.1
dd (float)1
dd (float)1
dd (float)1

newmem:

code:
  //jb PES2021.exe.trace+195B509
  //comiss xmm4,xmm2
  divss xmm1,[rcx]
  mulss xmm1,[mult_1]
movaps xmm0,xmm1
ret

  jmp return

INJECT:
  jmp newmem
return:
registersymbol(INJECT)

[DISABLE]

INJECT:
  db 72 1D 0F 2F E2

unregistersymbol(INJECT)
dealloc(newmem)
unregistersymbol(mult_1)

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>822</ID>
          <Description>"Cutscenes height fix attempt"</Description>
          <Options moHideChildren="1"/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{$lua}

[ENABLE]

local aobs=AOBScan('74 0C FF C1 48 83 C0 30 3B CA', "", 0)
if aobs~=nil and aobs.Count>0 then
local aob_count=aobs.Count
	for i=0,aob_count-1 do
        if i==0 then
		local res=tonumber(aobs[i],16)
		writeBytes(res,0xEB)
		registerSymbol('j_chg_CSH_j1_'..i,res)
        end
	end
end
aobs.destroy()

local aobs=AOBScan('76 12 F3 0F 10 0B F3 0F 58 D6 0F C6 C9 00', "", 0)
if aobs~=nil and aobs.Count>0 then
local aob_count=aobs.Count
	for i=0,aob_count-1 do
        if i>=1 then
		local res=tonumber(aobs[i],16)
		writeBytes(res,0x90,0x90)
		registerSymbol('j_chg_CSH_j2_'..i,res)
        end
	end
end
aobs.destroy()

--CANNOT BE DISABLED ONCE ENABLED; COMMENT OUT TO ALLOW DYNAMIC CHECKING OF THE TWO ABOVE!
local aobs=AOBScan('F3 0F 5C C3 0F 2F C5 72 05 0F 28 D1 EB 03 0F 28 D3', "", 0)
if aobs~=nil and aobs.Count>0 then
local aob_count=aobs.Count
	for i=0, aob_count-1 do
		local res=tonumber(aobs[i],16)
        writeBytes(res+7,0x90,0x90,0x90,0x90,0x90)
		writeBytes(res+25,0xF3,0x0F,0x10,0xE1,0x90,0x90,0x90,0x90)
		registerSymbol('j_chg_CSH_j3_'..i,res)
	end
end
aobs.destroy()


[DISABLE]
local function unreg()
  local c=0
  while true do
      local sn='j_chg_CSH_j1_'..c
	  local sa=getAddress(sn)
	  if sa~=nil then
		  writeBytes(sa,0x74)
		  unregisterSymbol(sn)
		  c=c+1
	  else
		  break
	  end
  end
end

local b, r = pcall(unreg)

local function unreg2()
  local c=0
  while true do
      local sn='j_chg_CSH_j2_'..c
	  local sa=getAddress(sn)
	  if sa~=nil then
		  writeBytes(sa,0x76,0x12)
		  unregisterSymbol(sn)
		  c=c+1
	  else
		  break
	  end
  end
end

b, r = pcall(unreg2)
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
</CheatTable>